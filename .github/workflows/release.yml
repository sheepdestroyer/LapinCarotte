name: Build and Release Executables

on:
  push:
    tags:
      - 'v*'   # Trigger on version tags like v1.0, v1.0.0, v0.4-beta
  workflow_dispatch: # Allows manual triggering
    inputs:
      tag_name:
        description: 'The tag to build and release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  determine_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.TAG }}
    steps:
      - name: Determine Tag
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

  build-windows:
    needs: determine_tag
    runs-on: windows-latest
    outputs:
      executable_name: LapinCarotte-${{ needs.determine_tag.outputs.tag }}.exe
      executable_path: dist/LapinCarotte-${{ needs.determine_tag.outputs.tag }}.exe
    steps:
      - name: Checkout repository at specified tag
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.determine_tag.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build executable with PyInstaller
        env:
          RELEASE_TAG: ${{ needs.determine_tag.outputs.tag }}
        run: python build_exe.py

      - name: Upload Windows executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: lapin-carotte-windows # Artifact name can remain generic
          path: dist/LapinCarotte-${{ needs.determine_tag.outputs.tag }}.exe # Path to the specifically named exe

  build-linux:
    needs: determine_tag
    runs-on: ubuntu-latest
    outputs:
      executable_name: LapinCarotte-${{ needs.determine_tag.outputs.tag }} # PyInstaller output on Linux has no extension by default
      executable_path: dist/LapinCarotte-${{ needs.determine_tag.outputs.tag }}
    steps:
      - name: Checkout repository at specified tag
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.determine_tag.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Linux build tools for PyInstaller (if any specific are needed, e.g., for UPX)
        run: |
          # sudo apt-get update
          # sudo apt-get install -y upx # Example if UPX was used, build_exe.py specifies --noupx

      - name: Build executable with PyInstaller
        env:
          RELEASE_TAG: ${{ needs.determine_tag.outputs.tag }}
        run: python -u build_exe.py

      - name: List contents of dist directory (Linux)
        if: always() # Run this step even if the build failed to see partial output
        run: |
          echo "Listing contents of ./dist/ (if it exists):"
          ls -lahR dist/ || echo "./dist/ directory not found or build failed to create it."
          echo "Listing contents of current directory:"
          ls -lah
          echo "Checking for log files if PyInstaller created any (e.g., build/LapinCarotte-${{ needs.determine_tag.outputs.tag }}/warn-LapinCarotte-${{ needs.determine_tag.outputs.tag }}.txt):"
          find build -name "*.txt" -print -exec cat {} \; || echo "No PyInstaller log files found in build/."


      - name: Upload Linux executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: lapin-carotte-linux # Artifact name can remain generic
          path: dist/LapinCarotte-${{ needs.determine_tag.outputs.tag }} # Path to the specifically named executable

  create-release:
    needs: [determine_tag, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: always() # Ensure this job runs even if build jobs fail, to create a partial release
    permissions:
      contents: write # Required to create releases and upload assets
    steps:
      - name: Checkout repository at specified tag
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.determine_tag.outputs.tag }} # Checkout the specific tag

      - name: Prepare Release Body
        id: prepare_body
        run: |
          body="Release of version ${{ needs.determine_tag.outputs.tag }}\n\n"
          if [[ "${{ needs.build-windows.result }}" == "success" ]]; then
            WIN_EXEC_NAME="${{ needs.build-windows.outputs.executable_name }}"
            body="${body}- Windows executable: \`${WIN_EXEC_NAME}\` (Succeeded)\n"
          else
            body="${body}- Windows build: Failed\n"
          fi
          if [[ "${{ needs.build-linux.result }}" == "success" ]]; then
            LINUX_EXEC_NAME="${{ needs.build-linux.outputs.executable_name }}"
            body="${body}- Linux executable: \`${LINUX_EXEC_NAME}\` (Succeeded)\n"
          else
            body="${body}- Linux build: Failed\n"
          fi
          if [[ "${{ needs.build-windows.result }}" != "success" && "${{ needs.build-linux.result }}" != "success" ]]; then
            body="${body}\n\nNo artifacts were successfully built."
            # Potentially mark as prerelease or draft if both fail
          fi
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get existing release info
        id: get_existing_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.determine_tag.outputs.tag }}
        run: |
          # Try to get upload_url and id of existing release.
          # gh release view exits with 0 if release exists, non-zero otherwise.
          if gh_data=$(gh release view "$TAG_NAME" --json id,uploadUrl --template '{{.id}}{{"\n"}}{{.uploadUrl}}' 2>/dev/null); then
            echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
            echo "EXISTING_RELEASE_ID=$(echo "$gh_data" | sed -n 1p)" >> $GITHUB_OUTPUT
            echo "EXISTING_UPLOAD_URL=$(echo "$gh_data" | sed -n 2p)" >> $GITHUB_OUTPUT
            echo "Release '$TAG_NAME' already exists. ID: $(echo "$gh_data" | sed -n 1p). Will upload assets to it."
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Release '$TAG_NAME' does not exist. Will create it."
          fi

      - name: Create GitHub Release (if it doesn't exist)
        id: create_new_release # Renamed id
        if: steps.get_existing_release.outputs.RELEASE_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.determine_tag.outputs.tag }}
          release_name: Release ${{ needs.determine_tag.outputs.tag }}
          body: ${{ steps.prepare_body.outputs.RELEASE_BODY }}
          draft: false
          prerelease: ${{ needs.build-windows.result != 'success' || needs.build-linux.result != 'success' }}

      - name: Set Upload URL
        id: set_upload_url
        run: |
          upload_url=""
          if [[ "${{ steps.get_existing_release.outputs.RELEASE_EXISTS }}" == "true" ]]; then
            upload_url="${{ steps.get_existing_release.outputs.EXISTING_UPLOAD_URL }}"
            echo "Using upload URL from existing release."
          elif [[ -n "${{ steps.create_new_release.outputs.upload_url }}" ]]; then
            # This block executes if RELEASE_EXISTS was 'false' AND create_new_release step ran and produced an upload_url
            upload_url="${{ steps.create_new_release.outputs.upload_url }}"
            echo "Using upload URL from newly created release."
          fi

          if [[ -z "$upload_url" ]]; then
            echo "Error: Could not determine upload URL. Release may not have been found or created successfully."
            # Check if create_new_release was supposed to run but didn't (e.g. its 'if' condition was false but RELEASE_EXISTS was also false)
            # This state should ideally not be reached if logic is correct and gh/actions work as expected.
            # However, if create_new_release step itself failed (not just skipped), its output might be empty.
            if [[ "${{ steps.get_existing_release.outputs.RELEASE_EXISTS }}" == "false" && -z "${{ steps.create_new_release.outputs.upload_url }}" ]]; then
                 echo "Debug: RELEASE_EXISTS is false, and create_new_release.outputs.upload_url is also empty."
                 echo "This might happen if the create_new_release step was skipped due to its own 'if' condition (which should match !RELEASE_EXISTS)"
                 echo "or if the create_new_release step failed to set its output, or did not run as expected."
            fi
            exit 1 # Fail the job if no upload URL can be determined
          fi
          echo "UPLOAD_URL=$upload_url" >> $GITHUB_OUTPUT
          echo "Final upload URL: $upload_url"
        env: # Pass outputs from previous conditional step explicitly for reliability in script
           EXISTING_RELEASE_EXISTS: ${{ steps.get_existing_release.outputs.RELEASE_EXISTS }}
           EXISTING_UPLOAD_URL: ${{ steps.get_existing_release.outputs.EXISTING_UPLOAD_URL }}
           NEW_RELEASE_UPLOAD_URL: ${{ steps.create_new_release.outputs.upload_url }}


      - name: Download Windows executable (if successful)
        if: needs.build-windows.result == 'success'
        uses: actions/download-artifact@v5
        with:
          name: lapin-carotte-windows
          path: dist-windows

      - name: Upload Windows Executable to Release (if successful)
        if: needs.build-windows.result == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.UPLOAD_URL }}
          asset_path: dist-windows/${{ needs.build-windows.outputs.executable_name }} # This now includes the tag and .exe
          asset_name: ${{ needs.build-windows.outputs.executable_name }} # This now includes the tag and .exe
          asset_content_type: application/octet-stream

      - name: Download Linux executable (if successful)
        if: needs.build-linux.result == 'success'
        uses: actions/download-artifact@v5
        with:
          name: lapin-carotte-linux # Artifact name is generic
          path: dist-linux # Download to this path

      - name: Upload Linux Executable to Release (if successful)
        if: needs.build-linux.result == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.UPLOAD_URL }}
          asset_path: dist-linux/${{ needs.build-linux.outputs.executable_name }} # Path to LapinCarotte-{tag}
          asset_name: LapinCarotte-${{ needs.determine_tag.outputs.tag }}-linux.bin # Desired release asset name
          asset_content_type: application/octet-stream

      - name: List downloaded files (for debugging, will only show if respective download ran)
        if: always() # Run this step always to see what was downloaded
        run: |
          echo "Listing dist-windows (if downloaded):"
          ls -R dist-windows || echo "dist-windows not downloaded or empty"
          echo "Listing dist-linux (if downloaded):"
          ls -R dist-linux || echo "dist-linux not downloaded or empty"
